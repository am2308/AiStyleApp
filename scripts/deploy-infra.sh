#!/bin/bash
set -e

echo "🚀 StyleAI Infrastructure Deployment"

# Default values
STACK_NAME="styleai-stack"
ENVIRONMENT="prod"
REGION="us-east-1"
TEMPLATE_FILE="cloudformation/styleai-infrastructure.yml"

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --stack-name)
      STACK_NAME="$2"
      shift 2
      ;;
    --env)
      ENVIRONMENT="$2"
      shift 2
      ;;
    --region)
      REGION="$2"
      shift 2
      ;;
    --domain)
      DOMAIN_NAME="$2"
      shift 2
      ;;
    --hosted-zone)
      HOSTED_ZONE_ID="$2"
      shift 2
      ;;
    --certificate)
      CERTIFICATE_ARN="$2"
      shift 2
      ;;
    --jwt-secret)
      JWT_SECRET="$2"
      shift 2
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

# Check if AWS CLI is installed
if ! command -v aws &> /dev/null; then
  echo "❌ AWS CLI is not installed. Please install it first."
  exit 1
fi

# Check if we're in the right directory
if [ ! -f "$TEMPLATE_FILE" ]; then
  echo "❌ CloudFormation template not found at $TEMPLATE_FILE"
  echo "Please run this script from the project root directory."
  exit 1
fi

# Generate JWT secret if not provided
if [ -z "$JWT_SECRET" ]; then
  JWT_SECRET=$(openssl rand -base64 32)
  echo "🔑 Generated random JWT secret"
fi

# Prepare parameters
PARAMETERS="ParameterKey=Environment,ParameterValue=$ENVIRONMENT"

if [ -n "$DOMAIN_NAME" ]; then
  PARAMETERS="$PARAMETERS ParameterKey=DomainName,ParameterValue=$DOMAIN_NAME"
fi

if [ -n "$HOSTED_ZONE_ID" ]; then
  PARAMETERS="$PARAMETERS ParameterKey=HostedZoneId,ParameterValue=$HOSTED_ZONE_ID"
fi

if [ -n "$CERTIFICATE_ARN" ]; then
  PARAMETERS="$PARAMETERS ParameterKey=CertificateArn,ParameterValue=$CERTIFICATE_ARN"
fi

if [ -n "$JWT_SECRET" ]; then
  PARAMETERS="$PARAMETERS ParameterKey=JwtSecret,ParameterValue=$JWT_SECRET"
fi

echo "📋 Deployment Configuration:"
echo "  Stack Name: $STACK_NAME"
echo "  Environment: $ENVIRONMENT"
echo "  Region: $REGION"
if [ -n "$DOMAIN_NAME" ]; then
  echo "  Domain: $DOMAIN_NAME"
fi

# Deploy CloudFormation stack
echo "🏗️  Deploying CloudFormation stack..."
aws cloudformation deploy \
  --template-file "$TEMPLATE_FILE" \
  --stack-name "$STACK_NAME" \
  --parameter-overrides $PARAMETERS \
  --capabilities CAPABILITY_IAM \
  --region "$REGION"

# Get stack outputs
echo "🔍 Getting stack outputs..."
aws cloudformation describe-stacks \
  --stack-name "$STACK_NAME" \
  --query "Stacks[0].Outputs" \
  --output table \
  --region "$REGION"

# Save outputs to .env files
echo "💾 Saving configuration to .env files..."

# Get specific outputs
FRONTEND_BUCKET=$(aws cloudformation describe-stacks \
  --stack-name "$STACK_NAME" \
  --query "Stacks[0].Outputs[?OutputKey=='FrontendBucketName'].OutputValue" \
  --output text \
  --region "$REGION")

IMAGES_BUCKET=$(aws cloudformation describe-stacks \
  --stack-name "$STACK_NAME" \
  --query "Stacks[0].Outputs[?OutputKey=='ImagesBucketName'].OutputValue" \
  --output text \
  --region "$REGION")

USERS_TABLE=$(aws cloudformation describe-stacks \
  --stack-name "$STACK_NAME" \
  --query "Stacks[0].Outputs[?OutputKey=='UsersTableName'].OutputValue" \
  --output text \
  --region "$REGION")

WARDROBE_TABLE=$(aws cloudformation describe-stacks \
  --stack-name "$STACK_NAME" \
  --query "Stacks[0].Outputs[?OutputKey=='WardrobeTableName'].OutputValue" \
  --output text \
  --region "$REGION")

CLOUDFRONT_DOMAIN=$(aws cloudformation describe-stacks \
  --stack-name "$STACK_NAME" \
  --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDomainName'].OutputValue" \
  --output text \
  --region "$REGION")

WEBSITE_URL=$(aws cloudformation describe-stacks \
  --stack-name "$STACK_NAME" \
  --query "Stacks[0].Outputs[?OutputKey=='WebsiteURL'].OutputValue" \
  --output text \
  --region "$REGION")

# Create backend .env file
cat > backend/.env << EOF
# Generated by deploy-infrastructure.sh on $(date)
NODE_ENV=$ENVIRONMENT
JWT_SECRET=$JWT_SECRET
JWT_EXPIRES_IN=7d

AWS_REGION=$REGION
USERS_TABLE=$USERS_TABLE
WARDROBE_TABLE=$WARDROBE_TABLE
S3_BUCKET=$IMAGES_BUCKET
S3_REGION=$REGION

# Add your API keys here
HUGGINGFACE_API_KEY=
EBAY_APP_ID=
EBAY_CERT_ID=
EBAY_DEV_ID=
RAPIDAPI_KEY=

# Frontend URL for CORS
FRONTEND_URL=$WEBSITE_URL
EOF

# Create frontend .env.production file
cat > frontend/.env.production << EOF
# Generated by deploy-infrastructure.sh on $(date)
VITE_API_URL=
VITE_APP_NAME=StyleAI
EOF

echo "✅ Infrastructure deployment complete!"
echo ""
echo "📋 Resources Created:"
echo "  Frontend S3 Bucket: $FRONTEND_BUCKET"
echo "  Images S3 Bucket: $IMAGES_BUCKET"
echo "  Users DynamoDB Table: $USERS_TABLE"
echo "  Wardrobe DynamoDB Table: $WARDROBE_TABLE"
echo "  CloudFront Domain: $CLOUDFRONT_DOMAIN"
echo "  Website URL: $WEBSITE_URL"
echo ""
echo "🔑 Configuration files created:"
echo "  - backend/.env"
echo "  - frontend/.env.production"
echo ""
echo "⚠️  Important: Update the following in backend/.env:"
echo "  - Add your API keys (HUGGINGFACE_API_KEY, EBAY_APP_ID, etc.)"
echo ""
echo "⚠️  Important: Update the following in frontend/.env.production:"
echo "  - Add your API URL after deploying the backend"
echo ""
echo "🚀 Next steps:"
echo "  1. Deploy the backend: ./scripts/deploy-backend.sh"
echo "  2. Deploy the frontend: ./scripts/deploy-frontend.sh"
